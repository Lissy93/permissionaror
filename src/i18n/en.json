{
  "title": "Permissionator",
  "titleLong": "Permissionator | CHMOD Calculator",
  "subtitle": "Linux chmod calculator for generating, converting and verifying file permissions",
  "subheadings": {
    "permissions": "Permissions",
    "output": "Output",
    "exampleCommands": "Example Commands",
    "aboutChmod": "What is chmod?",
    "commonPresets": "Common Presets",
    "specialBits": "Special Bits",
    "customOctal": "Custom Octal",
    "outputFile": "Output Options",
    "explanation": "What this means",
    "octalBreakdown": "How this was calculated",
    "cheatSheet": "Cheat Sheet"
  },
  "nav": {
    "subtitle": "Linux chmod calculator for generating, converting and verifying file permissions",
    "viewOnGitHub": "GitHub",
    "viewOnGitHubTitle": "View, edit, download the sourcecode for permissionator on GitHub",
    "viewOnGitHubAria": "View chmod calculator on GitHub",
    "learnChmod": "Learn chmod",
    "learnChmodTitle": "About chmod command",
    "learnChmodAria": "Learn all about the chmod command",
    "chmodCalculator": "chmod Calculator",
    "chmodCalculatorTitle": "Use the chmod calculator for generating Linux file permissions",
    "chmodCalculatorAria": "Try the chmod Calculator",
    "settingsTitle": "Switch to dark mode, or change the language"
  },
  "what": {
    "aboutChmod": "File permissions in Linux control who can read, write/edit and execute any given file. The chmod command is used to set these permissions.",
    "aboutChmod2": "These file permissions are a core feature of Linux and UNIX-like systems. They prevent unauthorized access or modifications of files, safeguard users from accidental changes, and ensure that only the right users can execute programs.",
    "aboutChmod3": "To set or update permissions, we use the `chmod` command. In the format of `chmod [permissions] [file/directory]`. The permissions can either be expressed in octal digits (like 755) or symbolic form (like u=rwx,g=rx,o=rx). The chmod combination is always specified in the order of (1) user, (2) group and (3) others/public.",
    "commonExamples": "Common Examples",
    "commonPresets": [
      {
        "number": "chmod 600 ~/.ssh/id_rsa",
        "description": "Owner read/write; private files like SSH keys"
      },
      {
        "number": "chmod 644 /var/www/html/index.html",
        "description": "Owner read/write; everyone else read; typical text files"
      },
      {
        "number": "chmod 700 /home/user/private_script.sh",
        "description": "Owner full control; private scripts or directories"
      },
      {
        "number": "chmod 755 /usr/local/bin/my_script.sh",
        "description": "Owner and group users have full access, all other users can only read and run"
      },
      {
        "number": "chmod 775 /shared/project",
        "description": "Everyone can read and execute, but only the owner can write; good for shared directories"
      }
    ],
    "cards": [
      {
        "heading": "Octal basics",
        "description": "Each role gets a digit: read=4, write=2, execute=1. Sum to get the digit: e.g., rwx = 7, rw- = 6, r-x = 5, r-- = 4. Common modes: 644 for files, 755 for directories."
      },
      {
        "heading": "Symbolic form",
        "description": "Use letters for users (u), group (g), others (o) with +, -, or =. For example: chmod u=rw,g=r,o= file.txt sets read/write for owner, read for group, and no access for others."
      },
      {
        "heading": "Special bits",
        "description": "setuid runs executables with the owner's privileges; setgid runs with the group's privileges; sticky prevents users from deleting others' files in shared directories (e.g., /tmp)."
      }
    ]
  },
  "examples": {
    "1": {
      "title": "Example #1 - Symbolic Form",
      "explanation": "This command will give read, write and execute permissions to the owner, and read and execute (but not write) to users in the group, and all other users"
    },
    "2": {
      "title": "Example #2 - Octal Denotion",
      "explanation": "This command will give read, write and execute permissions to the owner, and read and execute (but not write) to users in the group, and all other users"
    },
    "3": {
      "title": "Example #3 - Updating a single permission",
      "explanation": "This command will remove write permissions for the group, but leave read and execute permissions intact. The owner and others will not be affected."
    },
    "4": {
      "title": "Example #4 - Updating a single permission",
      "explanation": "Give the owner execute permission, while leaving read and write permissions intact. The group and others will not be affected. Below is the full list of options"
    },
    "5": {
      "title": "Example #5 - Common Preset  Quick Reference",
      "explanation": "This will make a file readable and writable by the owner, and just readable for the group and others. Remember, the first digit is user, second is group, third is others. So you can use the quick reference below to build your own permissions."
    }
  },
  "explain": {
    "roles": {
      "owner": "The file owner",
      "group": "Users in the group",
      "public": "Everyone"
    },
    "permissions": {
      "r": "read",
      "w": "write",
      "x": "execute"
    },
    "explanation": {
      "can": "can",
      "cannot": "cannot",
      "and": "and",
      "butNot": "but not",
      "butNoOneElse": "but no one else has access",
      "cannotDoAnything": "cannot read, write, or execute",
      "noAccessForOthers": "no one else has access"
    },
    "everyone": "Everyone"
  },
  "customExplanations": {
    "777": "Full read/write/execute access for everyone — great for testing or temporary public scratch directories, but very insecure for production because anyone can modify or delete files.",
    "755": "Common for directories and executables — the owner can modify, others can read and execute. Safe for public scripts or web server directories.",
    "750": "Owner has full control, group can read and execute, others have no access — good for team-shared scripts while blocking outsiders.",
    "700": "Only the owner can read, write, and execute — ideal for private scripts or configuration directories such as ~/.ssh.",
    "644": "Owner can read/write, others read-only — standard for text files, configs, and web content where only the owner edits.",
    "640": "Owner can read/write, group read-only, others no access — good for internal documents with no public access.",
    "600": "Only the owner can read and write — typical for sensitive files like SSH private keys, ensuring group and public have no access.",
    "444": "Read-only for everyone — useful for immutable public documents; requires chmod to modify again.",
    "400": "Owner read-only, no one else can access — used for sensitive static files like cryptographic keys.",
    "000": "No permissions for anyone — locks all access until permissions are restored; useful for temporarily disabling access."
  },
 "learn": {
    "title": "All about Linux File Permissions and chmod",
    "intro": "File permissions denote which users can read, write or execute files. It's important that only the users who need access to a file have it, to keep your system secure and functioning properly.",
    "whatArePermissions": {
      "title": "What are file permissions?",
      "content": [
        "File permissions control who can read, write, or execute a file or folder on a Linux system.",
        "They exist to keep your data safe, prevent unwanted changes, and ensure programs only run when intended.",
        "Permissions are one of the foundations of Linux security — without them, anyone could change system files or read your private data.",
        "Permissions are set using the chmod command, which we’ll cover in detail below."
      ]
    },
    "userTypes": {
      "title": "User types",
      "intro": "Linux permissions are applied separately for three different categories of users:",
      "points": [
        {
          "name": "Owner",
          "description": "Usually the person who created or owns the file."
        },
        {
          "name": "Group",
          "description": "Other users who are members of the file’s group."
        },
        {
          "name": "Others",
          "description": "Everyone else on the system who is not the owner or in the group."
        }
      ]
    },
    "permissionTypes": {
      "title": "Permission types",
      "items": [
        { "name": "Read (r)", "description": "View file contents or list files in a folder." },
        { "name": "Write (w)", "description": "Modify a file or add/remove files in a folder." },
        { "name": "Execute (x)", "description": "Run a file as a program or enter a folder." }
      ]
    },
    "chmodIntro": {
      "title": "The chmod command",
      "content": [
        "chmod stands for 'change mode'. It changes the permissions of a file or folder.",
        "You can use it in symbolic form (letters, like rwx) or numeric form (octal numbers, like 777).",
        "It works on single files or entire folders."
      ]
    },
    "symbolicRepresentation": {
      "title": "Symbolic representation",
      "content": [
        "The first option for specifying permissions is via symbolic mode, which uses letters to define permissions for each user type.",
        "This makes it easier to remember, read and understand. Yet it's more verbose than octal.",
        "So, r means read, w means write, and x means execute. If one of these characters is replaced with a dash (-), it means that permission is not granted."
      ]
    },
    "octalRepresentation": {
      "title": "Octal (numeric) representation",
      "content": [
        "Octal mode uses numbers to represent permissions.",
        "Where read = 4, write = 2 and execute = 1. ",
        "Then add these up to get a number, in this example 7, which means the specified user can read, write and execute the file.",
        "Similar to before, this is specified in the order of owner, group and others. ",
        "So 755 means the owner has rwx (7), group has rx (5), and others have rx (5)."
      ],
      "howCalculated": "If these numbers seem random to you, then it's helpful to know that they are calculated like any other binary digits. So, 111 (rwx) is 7, 101 (r-x) is 5, and 100 (r--) is 4."
    },
    "updateSinglePermission": {
      "title": "Updating a single permission",
      "content": [
        "Often, you won't want to change all permissions for a given file/folder, but just update one part.",
        "For example, just adding execute permission for the owner, removing write access for public users or setting read-only for the group.",
        "This can be done with the symbolic mode, using the `+`, `-` or `=` operators, following the format of `chmod [who][operator][permission] file`.",
        "Where `who` can be `u` (owner), `g` (group), `o` (others), or `a` (all).",
        "`operator` can be `+` (add), `-` (remove), or `=` (set exactly).",
        "Example: `chmod g-w file.txt` removes write permission from the group."
      ]
    },
    "recursiveChanges": {
      "title": "Changing permissions recursively",
      "content": [
        "Use the `-R` flag to change permissions for all files and folders inside a directory.",
        "For example: `chmod -R 755 /var/www` will apply 755 to every file and folder under /var/www.",
        "But be careful, as recursive changes can break system files if used incorrectly."
      ]
    },
    "ownership": {
      "title": "Ownership and chmod",
      "content": [
        "Permissions work alongside ownership. Each file has an owner and a group.",
        "If you need to change who owns a file, use `chown`.",
        "Example: `sudo chown user:group file.txt` changes both the owner and group."
      ]
    },
    "specialBits": {
      "title": "Special bits",
      "intro": "Beyond the standard read/write/execute, Linux has special permission bits:",
      "items": [
        { "name": "Setuid (4)", "description": "Runs the file with the owner’s permissions instead of the user’s." },
        { "name": "Setgid (2)", "description": "Runs the file with the group’s permissions. On directories, new files inherit the group." },
        { "name": "Sticky (1)", "description": "On directories, prevents users from deleting files they don’t own. Common on /tmp." }
      ]
    },
    "commonPresets": {
      "title": "Common chmod presets",
      "intro": "Here are common permission sets and their uses:",
      "table": [
        { "code": "600", "description": "Owner can read/write. No access for others. SSH private keys." },
        { "code": "644", "description": "Owner can read/write. Others can read. Default for many files." },
        { "code": "700", "description": "Owner has full control. No access for others. Private scripts." },
        { "code": "755", "description": "Owner can read/write/execute. Others can read/execute. Common for scripts." },
        { "code": "777", "description": "Everyone can read/write/execute. Avoid unless for temporary shared folders." }
      ]
    },
    "debugging": {
      "title": "Debugging file permissions",
      "intro": "If something doesn’t work, you may see these errors:",
      "errors": [
        { "message": "Permission denied", "fix": "Check if you have execute permission on files or read permission on folders. Add with `chmod +x file` or `chmod +r folder`." },
        { "message": "Operation not permitted", "fix": "You may need `sudo` to change system-owned files." },
        { "message": "Read-only file system", "fix": "The filesystem is mounted read-only. Remount with write permissions or contact your admin." },
        { "message": "Cannot open file: No such file or directory", "fix": "The file path may be wrong. Check with `ls`." }
      ]
    },
    "securityTips": {
      "title": "Security tips",
      "points": [
        "Only make a file executable if it needs to be run.",
        "Use 600 for private files and 644 for public-readable files.",
        "Avoid 777 unless absolutely necessary.",
        "Check permissions with `ls -l` before changing them.",
        "Test changes on non-critical files first."
      ]
    },
    "nextSteps": {
      "title": "Next steps",
      "content": "Try creating a test directory and experimenting with chmod in both symbolic and numeric forms. Once you’re confident, you can safely set permissions for real files."
    }
  },
  "images": {
    "chmod-calculating-file-permissions": {
      "title": "Linux File Permissions Explained: rwx to Numeric Conversion",
      "alt": "Visual guide showing how Linux file permissions convert from symbolic form (rwx, r-x, r-x) to binary and then to numeric form (7, 5, 5) for user, group, and others."
    },
    "chmod-modifying-file-permissions-command": {
      "title": "Understanding chmod Syntax: Who, Operators, and Permissions",
      "alt": "Diagram explaining chmod syntax with three sections: 'Who' showing u for user, g for group, o for others, a for all; 'Operators' showing + to add, - to remove, and = to set exact permissions; and 'Permissions' showing r for read, w for write, and x for execute."
    },
    "chmod-modifying-file-permissions-reference": {
      "title": "chmod Command Examples for Modifying File Permissions",
      "alt": "Table showing examples of chmod commands for modifying file permissions, including who the changes apply to, the operation performed, the permission type, and an explanation. Examples include u+r for adding read access to owner, g-w for removing write access from group, and a=x for setting execute-only permission for all."
    },
    "chmod-numeric-representation": {
      "title": "chmod 755 Explained: Numeric and Symbolic File Permissions",
      "alt": "Diagram showing chmod 755 in numeric and symbolic forms. Numeric form 755 corresponds to rwx for owner, r-x for group, and r-x for others, meaning owner can read, write, and execute, while group and others can only read and execute."
    },
    "chmod-reference-table": {
      "title": "Linux File Permission Values: Octal, Symbolic, and Meaning",
      "alt": "Table mapping octal numeric values 0–7 to symbolic file permissions and their meanings. For example, 0 is no permissions (---), 4 is read only (r--), 5 is read and execute (r-x), and 7 is read, write, and execute (rwx)."
    },
    "chmod-symbolic-representation": {
      "title": "Understanding Linux File Permission Strings",
      "alt": "Diagram explaining the structure of Linux file permission strings. Shows file type indicator followed by permissions for owner, group, and public. Example '-rwxr-xr-x' means owner can read, write, and execute, group can read and execute, others can read and execute."
    }
  }
}
