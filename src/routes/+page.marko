import { t, get } from "../i18n";
import {
  defaultPermState,
  setColumn,
  setRow,
  denyAll,
  isRowSelected,
  isColSelected,
} from "../utils/permissions.ts";


class {
  onCreate() {
    this.roles = ["owner", "group", "public"];
    this.permissions = ["r", "w", "x"];
    this.state = {
      permState: defaultPermState,
    };
  }

  resetPermissions() {
    this.state.permState = defaultPermState;
  }

  denyAllPermissions() {
    this.state.permState = denyAll();
  }

  handleToggle(event) {
    const { role, perm, checked } = event;
    this.state.permState = {
      ...this.state.permState,
      [role]: { ...this.state.permState[role], [perm]: checked }
    };
  }

  handleRowToggle(event) {
    const { role } = event;
    this.state.permState = setRow(this.state.permState, role, !isRowSelected(this.state.permState, role, this.permissions));
  }

  handleColToggle(event) {
    const { perm } = event;
    this.state.permState = setColumn(this.state.permState, perm, !isColSelected(this.state.permState, perm, this.roles));
  }
}


$ const roles = ["owner", "group", "public"];
$ const permissions = ["r", "w", "x"];

$ const permNames = {
  r: "read",
  w: "write",
  x: "execute"
};

static function handleToggle(event) {
    const { role, perm, checked } = event;
    this.state.permState = {
      ...this.state.permState,
      [role]: { ...this.state.permState[role], [perm]: checked }
    };
}

<div class="w-full max-w-7xl mx-auto px-4">
  <div class="mt-6 grid grid-cols-1 gap-4 md:grid-cols-2">
    <Card title=(get("subheadings.permissions"))>
      <@cardControls>
        <div class="flex gap-2">
          <Button variant="neutral" text="Reset" on-click('resetPermissions') />
          <Button variant="danger" text="Deny All" on-click('denyAllPermissions') />
        </div>
      </@cardControls>

      <table class="border-separate border-spacing-2">
        <thead>
          <tr>
            <th class=""></th>
            <for|perm| of=permissions>
              <th class="text-left font-semibold w-24">
                <Toggle
                  label=(permNames[perm])
                  type="column"
                  perm=(perm)
                  checked=(isColSelected(state.permState, perm, roles))
                  on-toggle('handleColToggle')
                />
              </th>
            </for>
          </tr>
        </thead>
        <tbody>
          <for|role| of=roles>
            <tr>
              <td class="font-semibold">
                <Toggle
                  label=(role)
                  type="row"
                  checked=(isRowSelected(state.permState, role, permissions))
                  on-toggle('handleRowToggle')
                  role=(role)
                />
              </td>
              <for|perm| of=permissions>
                <td>
                  <Toggle
                    label=(perm.toUpperCase())
                    checked=(state.permState[role][perm])
                    on-toggle(handleToggle)
                    role=(role)
                    perm=(perm)
                  />
                </td>
              </for>
            </tr>
          </for>
        </tbody>
      </table>


      <div>
        <!-- TODO:
          - Add a grid of toggles, for Owner/Group/Public (y-axis) and Read/Write/Execute (x-axis)
          - Store state of each toggle in a reactive variable
          - Clicking any of the rows or columns should toggle the state of the corresponding permissions
        -->
      </div>

    </Card>
    <div class="flex gap-4 flex-col">
    <Card title=(get("subheadings.output"))>
      <p>TODO</p>
    </Card>
    <Card title=(get("subheadings.exampleCommands"))>
      <p>TODO</p>
    </Card>
    </div>
    <div class="col-span-1 md:col-span-2">
      <AboutChmod />
    </div>
  </div>
</div>
